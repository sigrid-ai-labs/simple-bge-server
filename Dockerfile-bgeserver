# -------------------
# 1) Builder stage
# -------------------
# FROM nvidia/cuda:12.2.0-base-ubuntu22.04 AS build
FROM docker.io/nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04

# Avoid interactive prompts in apt-get, set locale
ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Install only essentials (no python from apt)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Install uv (Astral)
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/usr/local/bin:$PATH"

# link `uv` to /root/.local/bin
RUN ln -s /root/.local/bin/uv /usr/local/bin/uv

# Install Python via uv (pick the version you need)
RUN uv python install 3.12

# Create project directory and copy code
WORKDIR /app
COPY pyproject.toml .
COPY main.py .

# Install dependencies via uv sync
RUN uv sync

# -------------------
# 2) Final / runtime stage
# -------------------
FROM nvidia/cuda:12.2.0-base-ubuntu22.04

# Avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Create matching directories
RUN mkdir -p /root/.local/bin && mkdir -p /root/.local/share/uv

# 1) Copy uv (and the symlink) from build stage
COPY --from=build /root/.local/bin/uv /root/.local/bin/uv

# 2) Copy uv-managed Python from build stage
COPY --from=build /root/.local/share/uv /root/.local/share/uv

# 3) Ensure uv and installed Python are on PATH
ENV PATH="/root/.local/bin:/root/.local/share/uv/python/default/bin:$PATH"

# 4) Copy your application folder
WORKDIR /app
COPY --from=build /app /app

# 5) Expose the application port
EXPOSE 8000

# 6) Run your app via uv
CMD ["uv", "run", "uvicorn", "main:app", "--host=0.0.0.0", "--port=8000", "--loop=uvloop"]
